// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  password  String?
  firstName String?
  lastName  String?
  avatar    String?
  isOnline  Boolean   @default(false)
  lastSeen  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  sentMessages  Message[]          @relation("UserSentMessages")
  conversations ConversationUser[]

  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  name      String?
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  participants ConversationUser[]
  messages     Message[]

  @@map("conversations")
}

model ConversationUser {
  id             String    @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime  @default(now())
  lastReadAt     DateTime?

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@map("conversation_users")
}

model Message {
  id             String      @id @default(cuid())
  content        String
  type           MessageType @default(TEXT)
  senderId       String
  conversationId String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  sender       User         @relation("UserSentMessages", fields: [senderId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}
